// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCPACKET_HUNSERVER_SCPACKET_H_
#define FLATBUFFERS_GENERATED_SCPACKET_HUNSERVER_SCPACKET_H_

#include "flatbuffers/flatbuffers.h"

namespace HunServer {
namespace SCPacket {

struct Vec3;

struct LoginOk;

enum PacketHeader {
  PacketHeader_NONE = 0,
  PacketHeader_LoginOk = 1,
  PacketHeader_MIN = PacketHeader_NONE,
  PacketHeader_MAX = PacketHeader_LoginOk
};

inline PacketHeader (&EnumValuesPacketHeader())[2] {
  static PacketHeader values[] = {
    PacketHeader_NONE,
    PacketHeader_LoginOk
  };
  return values;
}

inline const char **EnumNamesPacketHeader() {
  static const char *names[] = {
    "NONE",
    "LoginOk",
    nullptr
  };
  return names;
}

inline const char *EnumNamePacketHeader(PacketHeader e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesPacketHeader()[index];
}

template<typename T> struct PacketHeaderTraits {
  static const PacketHeader enum_value = PacketHeader_NONE;
};

template<> struct PacketHeaderTraits<LoginOk> {
  static const PacketHeader enum_value = PacketHeader_LoginOk;
};

bool VerifyPacketHeader(flatbuffers::Verifier &verifier, const void *obj, PacketHeader type);
bool VerifyPacketHeaderVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3() {
    memset(this, 0, sizeof(Vec3));
  }
  Vec3(const Vec3 &_o) {
    memcpy(this, &_o, sizeof(Vec3));
  }
  Vec3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
STRUCT_END(Vec3, 12);

struct LoginOk FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_HEADER_TYPE = 4,
    VT_HEADER = 6
  };
  PacketHeader header_type() const {
    return static_cast<PacketHeader>(GetField<uint8_t>(VT_HEADER_TYPE, 0));
  }
  const void *header() const {
    return GetPointer<const void *>(VT_HEADER);
  }
  template<typename T> const T *header_as() const;
  const LoginOk *header_as_LoginOk() const {
    return header_type() == PacketHeader_LoginOk ? static_cast<const LoginOk *>(header()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_HEADER_TYPE) &&
           VerifyOffset(verifier, VT_HEADER) &&
           VerifyPacketHeader(verifier, header(), header_type()) &&
           verifier.EndTable();
  }
};

template<> inline const LoginOk *LoginOk::header_as<LoginOk>() const {
  return header_as_LoginOk();
}

struct LoginOkBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_header_type(PacketHeader header_type) {
    fbb_.AddElement<uint8_t>(LoginOk::VT_HEADER_TYPE, static_cast<uint8_t>(header_type), 0);
  }
  void add_header(flatbuffers::Offset<void> header) {
    fbb_.AddOffset(LoginOk::VT_HEADER, header);
  }
  LoginOkBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LoginOkBuilder &operator=(const LoginOkBuilder &);
  flatbuffers::Offset<LoginOk> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<LoginOk>(end);
    return o;
  }
};

inline flatbuffers::Offset<LoginOk> CreateLoginOk(
    flatbuffers::FlatBufferBuilder &_fbb,
    PacketHeader header_type = PacketHeader_NONE,
    flatbuffers::Offset<void> header = 0) {
  LoginOkBuilder builder_(_fbb);
  builder_.add_header(header);
  builder_.add_header_type(header_type);
  return builder_.Finish();
}

inline bool VerifyPacketHeader(flatbuffers::Verifier &verifier, const void *obj, PacketHeader type) {
  switch (type) {
    case PacketHeader_NONE: {
      return true;
    }
    case PacketHeader_LoginOk: {
      auto ptr = reinterpret_cast<const LoginOk *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyPacketHeaderVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPacketHeader(
        verifier,  values->Get(i), types->GetEnum<PacketHeader>(i))) {
      return false;
    }
  }
  return true;
}

inline const HunServer::SCPacket::LoginOk *GetLoginOk(const void *buf) {
  return flatbuffers::GetRoot<HunServer::SCPacket::LoginOk>(buf);
}

inline bool VerifyLoginOkBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<HunServer::SCPacket::LoginOk>(nullptr);
}

inline void FinishLoginOkBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<HunServer::SCPacket::LoginOk> root) {
  fbb.Finish(root);
}

}  // namespace SCPacket
}  // namespace HunServer

#endif  // FLATBUFFERS_GENERATED_SCPACKET_HUNSERVER_SCPACKET_H_
